[
	{
		"question": "Что такое объектно-ориентированное программирование (ООП)?",
		"answer": "ООП — это парадигма программирования, основанная на представлении программы как совокупности объектов, взаимодействующих между собой. Каждый объект — экземпляр класса, содержащий данные (свойства) и поведение (методы). Основные принципы: инкапсуляция, наследование, полиморфизм, абстракция."
	},
	{
		"question": "Что такое класс и объект в ООП?",
		"answer": "Класс — это шаблон или чертёж, описывающий структуру и поведение объектов. Объект — это конкретный экземпляр класса с уникальным состоянием. Например, класс 'Автомобиль' описывает свойства (цвет, скорость), а объект — это конкретный красный автомобиль, движущийся со скоростью 60 км/ч."
	},
	{
		"question": "Что такое инкапсуляция?",
		"answer": "Инкапсуляция — это сокрытие внутренних данных объекта и ограничение доступа к ним. Публичные методы (геттеры/сеттеры) контролируют, как данные читаются и изменяются. Это защищает целостность состояния и позволяет менять реализацию без влияния на внешний код."
	},
	{
		"question": "Что такое наследование?",
		"answer": "Наследование позволяет одному классу (дочернему) наследовать свойства и методы другого (родительского). Это способствует повторному использованию кода и построению иерархий. Например, класс 'Собака' может наследовать от 'Животное'."
	},
	{
		"question": "Что такое полиморфизм?",
		"answer": "Полиморфизм — это способность объектов разных классов обрабатывать один и тот же вызов по-разному. Например, метод 'издатьЗвук()' у классов 'Собака' и 'Кошка' будет возвращать разные значения. Это позволяет писать универсальный код, работающий с общим интерфейсом."
	},
	{
		"question": "Что такое абстракция?",
		"answer": "Абстракция — это выделение ключевых характеристик объекта и скрытие ненужных деталей. Например, при работе с 'Кофемашиной' пользователь знает, как включить её, но не интересуется внутренним устройством. В коде — абстрактные классы и интерфейсы."
	},
	{
		"question": "Что такое конструктор в классе?",
		"answer": "Конструктор — это специальный метод, вызываемый при создании объекта. Он инициализирует свойства объекта. В JavaScript это метод `constructor()` в классе. Например: `constructor(name) { this.name = name; }`."
	},
	{
		"question": "Что такое статические методы и свойства?",
		"answer": "Статические методы и свойства принадлежат самому классу, а не его экземплярам. Они вызываются без создания объекта: `MyClass.staticMethod()`. Полезны для утилит, фабрик, кэширования."
	},
	{
		"question": "В чём разница между прототипным и классическим наследованием?",
		"answer": "Классическое наследование (в Java, C#) — иерархия классов. Прототипное (в JavaScript) — объекты наследуют напрямую от других объектов через цепочку прототипов. ES6-классы — синтаксический сахар над прототипами."
	},
	{
		"question": "Что такое композиция и зачем она нужна?",
		"answer": "Композиция — это построение сложных объектов из более простых. Вместо 'наследования', объект содержит другие объекты. Например, 'Автомобиль' имеет 'Двигатель'. Это гибче и понятнее, чем глубокая иерархия наследования."
	},
	{
		"question": "Что такое агрегация и ассоциация?",
		"answer": "Ассоциация — общая связь между объектами (например, 'Учитель учит Студента'). Агрегация — слабая 'входит в' связь, где часть может существовать отдельно (например, 'Факультет' имеет 'Студентов'). Композиция — сильная связь, при которой часть не существует без целого."
	},
	{
		"question": "Что такое переопределение методов (method overriding)?",
		"answer": "Переопределение — это реализация метода в подклассе, которая заменяет реализацию из родительского класса. Например, метод `render()` в классе `Button` может быть переопределён в `IconButton`. Обеспечивает полиморфизм."
	},
	{
		"question": "Что такое перегрузка методов (method overloading)?",
		"answer": "Перегрузка — это наличие нескольких методов с одним именем, но разными параметрами. В JavaScript нет встроенной перегрузки, но её можно эмулировать через проверку аргументов. В TypeScript — поддерживается."
	},
	{
		"question": "Что такое интерфейс в ООП?",
		"answer": "Интерфейс определяет контракт — набор методов, которые должен реализовать класс. В JavaScript нет встроенного понятия интерфейса, но он реализуется через соглашения или в TypeScript. Гарантирует, что объект будет поддерживать нужный API."
	},
	{
		"question": "Что такое абстрактный класс?",
		"answer": "Абстрактный класс — это класс, который нельзя создать напрямую. Он предназначен для наследования и может содержать как реализованные, так и абстрактные (не реализованные) методы. В JavaScript — нет встроенной поддержки, но эмулируется."
	},

	{
		"question": "Что такое SOLID и зачем он нужен?",
		"answer": "SOLID — это пять принципов ООП и проектирования: SRP, OCP, LSP, ISP, DIP. Они помогают писать код, который легко поддерживать, тестировать и расширять. Особенно важны в крупных приложениях."
	},
	{
		"question": "Что такое принцип единственной ответственности (SRP)?",
		"answer": "Класс должен иметь только одну причину для изменения. То есть отвечать за одну зону ответственности. Например, класс 'User' не должен сохранять данные в БД — это задача 'UserService'."
	},
	{
		"question": "Что такое принцип открытости/закрытости (OCP)?",
		"answer": "Классы должны быть открыты для расширения, но закрыты для модификации. Новую функциональность добавляют через наследование или композицию, а не правкой существующего кода. Например, добавить новый тип отчёта через новый класс, а не `if-else` в старом."
	},
	{
		"question": "Что такое принцип подстановки Лисков (LSP)?",
		"answer": "Объекты подкласса должны быть взаимозаменяемы с объектами базового класса без нарушения работы программы. Если `Птица` летает, то `Страус` (наследник) не должен ломать логику, если не может летать. Лучше — выделить интерфейс 'Летающий'."
	},
	{
		"question": "Что такое принцип разделения интерфейсов (ISP)?",
		"answer": "Клиенты не должны зависеть от интерфейсов, которые они не используют. Лучше создать несколько специализированных интерфейсов, чем один «толстый». Например: `Печатать()`, `Сканировать()`, `Копировать()` вместо `МногофункциональныйПринтер`."
	},
	{
		"question": "Что такое инверсия зависимостей (DIP)?",
		"answer": "Высокоуровневые модули не должны зависеть от низкоуровневых. Оба должны зависеть от абстракций. Также абстракции не должны зависеть от деталей, а детали — от абстракций. Основа паттерна Dependency Injection."
	},
	{
		"question": "Что такое Dependency Injection (DI)?",
		"answer": "DI — это техника, при которой зависимости объекта передаются извне, а не создаются внутри. Например, сервис передаётся в конструктор, а не создаётся через `new`. Это упрощает тестирование и делает код гибче."
	},
	{
		"question": "Какие есть основные шаблоны проектирования?",
		"answer": "Основные группы: Порождающие (Factory, Singleton, Builder), Структурные (Adapter, Decorator, Composite), Поведенческие (Observer, Strategy, Iterator). Они решают типовые задачи проектирования."
	},
	{
		"question": "Что такое паттерн Singleton?",
		"answer": "Singleton гарантирует, что у класса будет только один экземпляр и предоставляет глобальную точку доступа к нему. Часто используется для логгера, конфига, подключения к БД. В JavaScript — легко реализуется через модуль или замыкание."
	},
	{
		"question": "Что такое паттерн Observer?",
		"answer": "Observer позволяет объекту (субъекту) уведомлять другие объекты (наблюдателей) об изменениях. Основа реактивного программирования. В React — похоже на работу с состоянием и колбэками. В JS — `EventTarget`, `CustomEvent`."
	}
]
