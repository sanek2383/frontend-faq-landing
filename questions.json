{
	"JavaScript": [
		{
			"question": "Какие примитивные типы данных существуют в JavaScript?",
			"answer": "Примитивы: String, Number, Boolean, Null, Undefined, Symbol, BigInt. Они передаются по значению и являются неизменяемыми (immutable). Любые сложные структуры (объекты, массивы, функции) — ссылочные типы."
		},
		{
			"question": "Что такое объект в JavaScript?",
			"answer": "Объект — это коллекция пар ключ–значение с динамически расширяемым набором свойств. Ключи — строки или Symbol, значения — любого типа. Объекты сравниваются и передаются по ссылке."
		},
		{
			"question": "В чём разница между null и undefined?",
			"answer": "undefined означает «значение отсутствует/не задано» (переменная объявлена, но не инициализирована). null — намеренное отсутствие значения, задаётся явно. Проверяя на равенство, используйте строгое сравнение ===."
		},
		{
			"question": "Что вернёт typeof null и почему?",
			"answer": "typeof null возвращает 'object' из‑за исторической ошибки в спецификации. Это не объект; проверяйте null через строгие сравнения: value === null."
		},
		{
			"question": "Что такое NaN и как его корректно проверять?",
			"answer": "NaN — специальное числовое значение «не число», результат некорректных числовых операций. Проверяйте через Number.isNaN(value); сравнение NaN === NaN всегда ложно."
		},
		{
			"question": "Как проверить, что значение — массив?",
			"answer": "Используйте Array.isArray(value). Это надёжнее, чем instanceof Array, особенно при работе с несколькими реализациями (iframes) или сторонними библиотеками."
		},
		{
			"question": "Как сравниваются объекты в JavaScript?",
			"answer": "Объекты сравниваются по ссылке: два литерала с одинаковым содержимым не равны ({} !== {}). Для сравнения «по значению» пишут глубокие сравнения или используют сериализацию/библиотеки."
		},
		{
			"question": "В чём разница между '==' и '==='?",
			"answer": "== выполняет приведение типов и может приводить к неожиданным результатам ('0' == 0 → true). === сравнивает тип и значение без приведения и считается безопаснее по умолчанию."
		},
		{
			"question": "Для чего нужен оператор typeof?",
			"answer": "typeof возвращает строку с типом значения на момент выполнения (например, 'string', 'object', 'function'). Помните об исключениях: typeof null === 'object'."
		},
		{
			"question": "Что делает оператор instanceof?",
			"answer": "instanceof проверяет наличие конструктора в цепочке прототипов объекта (obj instanceof Ctor). Работает надёжно внутри одного реалма; между реалмами может давать ложные результаты."
		},
		{
			"question": "Что делает оператор in?",
			"answer": "Оператор 'key' in obj проверяет наличие свойства в объекте или его прототипной цепочке. Для проверки «только на самом объекте» используйте Object.hasOwn(obj, key)."
		},
		{
			"question": "Чем отличаются var, let и const?",
			"answer": "var — функциональная область видимости и hoisting с инициализацией undefined; допускает переобъявление. let/const — блочная область видимости и TDZ; const запрещает переназначение ссылки."
		},
		{
			"question": "Что такое hoisting?",
			"answer": "Hoisting — «поднятие» объявлений в начало области видимости. var и функции‑декларации поднимаются; let/const поднимаются логически, но недоступны до инициализации (TDZ)."
		},
		{
			"question": "Что такое область видимости (scope)?",
			"answer": "Scope определяет, где доступны идентификаторы. В JS есть глобальная, функциональная и блочная области. Замыкания позволяют функции удерживать ссылки на внешние переменные."
		},
		{
			"question": "Что такое временная мёртвая зона (TDZ)?",
			"answer": "TDZ — участок кода от начала блока до инициализации let/const, где доступ к переменной вызывает ReferenceError. Это предотвращает обращение к неинициализированным значениям."
		},
		{
			"question": "Что такое замыкание (closure)?",
			"answer": "Замыкание — функция + связанный лексический контекст. Функция помнит внешние переменные даже после завершения внешней функции. Полезно для инкапсуляции и фабрик функций."
		},
		{
			"question": "Что такое IIFE и когда применять?",
			"answer": "IIFE (Immediately Invoked Function Expression) — функция, вызываемая сразу после объявления. Используется для изоляции временных переменных и создания локального скоупа без глобальных утечек."
		},
		{
			"question": "Что такое объект arguments и в чём его отличие от rest‑параметров?",
			"answer": "arguments — псевдомассив с фактически переданными аргументами в обычной функции. Он не работает в стрелочных функциях и лишён большинства методов массива; rest (...) создаёт настоящий массив."
		},
		{
			"question": "Для чего нужны rest‑параметры?",
			"answer": "Rest‑параметры собирают «хвост» аргументов в массив: function f(a, ...rest). Удобны для вариативных функций и работают со стрелочными функциями; заменяют многие случаи использования arguments."
		},
		{
			"question": "Для чего нужен оператор spread?",
			"answer": "Spread (...) разворачивает массив/объект: [...arr], { ...obj }. Применяется для копий, объединений и передачи элементов как отдельных аргументов. Выполняет поверхностное копирование."
		},
		{
			"question": "Что такое стрелочные функции и их особенности?",
			"answer": "Стрелочные функции короче по синтаксису, не имеют собственного this/arguments/super/new.target. Хороши для колбэков; не подходят как конструкторы и методы, где нужен динамический this."
		},
		{
			"question": "Как работает ключевое слово this?",
			"answer": "this определяется контекстом вызова: метод — объект, call/apply/bind — явно заданное значение, конструктор — новый экземпляр. В стрелочных функциях this лексически унаследован."
		},
		{
			"question": "Для чего нужен Function.prototype.bind?",
			"answer": "bind возвращает новую функцию с зафиксированным this и, опционально, частично применёнными аргументами. Используется для передачи методов как колбэков и контроля контекста выполнения."
		},
		{
			"question": "Чем отличаются call и apply?",
			"answer": "Оба вызывают функцию с указанным this. Разница в передаче аргументов: call(a, x, y), apply(a, [x, y]). В современном коде apply часто заменяют на call с spread: fn.call(a, ...args)."
		},
		{
			"question": "Что такое прототипное наследование?",
			"answer": "Объекты делят поведение через цепочку __proto__/[[Prototype]]. Поиск свойства идёт по цепочке до Object.prototype. Это основа классового синтаксиса и работы instanceof."
		},
		{
			"question": "Для чего используется Object.create?",
			"answer": "Object.create(proto, descriptors?) создаёт объект с заданным прототипом. Удобно для «чистых» словарей (Object.create(null)) и для тонкого контроля над свойствами/наследованием."
		},
		{
			"question": "Что такое классы в ES6 и как они связаны с прототипами?",
			"answer": "Классы — синтаксический сахар над прототипами: методы лежат на prototype, наследование оформляется через extends/super. Поля/статические члены/приватные #поля — дополнительные возможности."
		},
		{
			"question": "Чем отличаются function declaration и function expression?",
			"answer": "Declaration поднимается целиком (можно вызывать до объявления). Expression создаёт функцию как значение, не поднимается целиком. Выбор влияет на порядок кода и тестируемость."
		},
		{
			"question": "Что такое JSON и где его применять?",
			"answer": "JSON — текстовый формат обмена данными, близкий к синтаксису объектов JS. Используется в REST, настройках и хранилищах. Не поддерживает функции, undefined и ссылки по умолчанию."
		},
		{
			"question": "Что делает JSON.stringify и какие есть опции?",
			"answer": "Преобразует значение в строку JSON. Второй аргумент — replacer (фильтрация/трансформация), третий — отступы/форматирование. Кольцевые ссылки вызовут ошибку без кастомной обработки."
		},
		{
			"question": "Что делает JSON.parse и как безопасно парсить?",
			"answer": "Преобразует JSON‑строку в значение. Второй аргумент — reviver для пост‑обработки (например, восстановление дат). Парсьте только доверенные строки или валидируйте формат заранее."
		},
		{
			"question": "Как работает setTimeout и точность таймеров?",
			"answer": "setTimeout планирует колбэк после минимальной задержки; реальное время зависит от нагрузок и очередей. Минимальная задержка в неактивных вкладках/таймерах может быть повышена браузером."
		},
		{
			"question": "Для чего нужен setInterval и почему его часто избегают?",
			"answer": "setInterval вызывает колбэк периодически. При долгих задачах колбэки могут «скапливаться»; чаще используют рекурсивный setTimeout или requestAnimationFrame для предсказуемости."
		},
		{
			"question": "Как отменить таймеры?",
			"answer": "clearTimeout(id) и clearInterval(id) отменяют соответствующие таймеры. Всегда сохраняйте id, особенно в компонентах UI, чтобы убирать эффекты при размонтировании."
		},
		{
			"question": "Что такое callback‑функция и как избегать callback hell?",
			"answer": "Callback — функция, передаваемая как аргумент и вызываемая при наступлении события/результата. Для сложной асинхронщины используйте промисы/async‑await и композицию вместо вложенности."
		},
		{
			"question": "Что такое Promise и его основные состояния?",
			"answer": "Promise инкапсулирует асинхронное вычисление со состояниями pending → fulfilled/rejected. Цепочки then/catch формируют пайплайны; один промис резолвится/реджектится только один раз."
		},
		{
			"question": "Как работает Promise.prototype.then и чейнинг?",
			"answer": "then принимает обработчик успеха и возвращает новый промис, позволяя строить цепочки. Возвращённое значение/промис определяет, что попадёт дальше по цепочке."
		},
		{
			"question": "Для чего нужен Promise.prototype.catch?",
			"answer": "catch перехватывает ошибки в предыдущих шагах цепочки (включая синхронные исключения). Можно ставить в конце цепочки как общий обработчик."
		},
		{
			"question": "Для чего нужен Promise.prototype.finally?",
			"answer": "finally вызывает колбэк при любом исходе без изменения значения/ошибки. Удобен для освобождения ресурсов, скрытия лоадеров и завершения побочных эффектов."
		},
		{
			"question": "Что такое async/await и как обрабатывать ошибки?",
			"answer": "async функция возвращает промис; await «распаковывает» его результат. Ошибки ловят через try/catch или Promise.allSettled; параллелизм достигается запуском промисов до await."
		},
		{
			"question": "Как работает event loop в браузере/Node.js?",
			"answer": "Event loop обрабатывает очереди задач: макрозадачи (timers, I/O) и микрозадачи (промисы). После каждой макрозадачи выполняются все микрозадачи, затем перерисовка/следующая итерация."
		},
		{
			"question": "Что такое microtask queue и что туда попадает?",
			"answer": "Очередь микрозадач содержит then/catch/finally, MutationObserver и process.nextTick (в Node.js приоритетнее). Микрозадачи выполняются до следующей перерисовки/макрозадачи."
		},
		{
			"question": "Что такое macrotask queue и примеры?",
			"answer": "Макрозадачи — более «крупные» события: setTimeout, setInterval, I/O, messageChannel, UI‑события. Между макрозадачами движок может делать рендер кадра."
		},
		{
			"question": "Что такое всплытие событий (bubbling)?",
			"answer": "Событие идёт от целевого элемента вверх по дереву к document, вызывая обработчики по пути. Это позволяет ставить обработчики на контейнеры и реагировать централизованно."
		},
		{
			"question": "Что такое погружение (capturing) и порядок фаз?",
			"answer": "Capturing проходит сверху вниз, затем target, затем bubbling. addEventListener(type, handler, { capture: true }) слушает на фазе погружения; по умолчанию — на фазе всплытия."
		},
		{
			"question": "Как остановить всплытие и предотвратить действие по умолчанию?",
			"answer": "event.stopPropagation()/stopImmediatePropagation() останавливают распространение. event.preventDefault() отменяет стандартное действие (например, отправку формы/переход по ссылке)."
		},
		{
			"question": "Что такое делегирование событий и зачем оно нужно?",
			"answer": "Ставим один обработчик на родителя и различаем цели через event.target/closest(). Это экономит память, упрощает работу с динамическими списками и снижает количество подписок."
		},
		{
			"question": "Для чего используется Array.prototype.map?",
			"answer": "map создаёт новый массив, применяя функцию к каждому элементу (чистая трансформация). Не изменяет исходный массив; удобен для преобразования данных в UI‑модели."
		},
		{
			"question": "Для чего используется Array.prototype.filter?",
			"answer": "filter возвращает новый массив, оставляя элементы, для которых предикат true. Полезен для фильтрации по условиям без мутаций; производительность зависит от размера массива/предиката."
		},
		{
			"question": "Для чего используется Array.prototype.reduce?",
			"answer": "reduce сворачивает массив в одно значение (сумма, объект, Map). Начальное значение важно для пустых массивов; избегайте сложной логики — выносите в отдельные функции."
		},
		{
			"question": "В чём особенность Array.prototype.forEach?",
			"answer": "forEach перебирает элементы ради побочных эффектов (логирование, мутации). Не возвращает новый массив и игнорирует break/return из колбэка — используйте some/every для раннего выхода."
		},
		{
			"question": "Для чего используется Array.prototype.find?",
			"answer": "find возвращает первый элемент, удовлетворяющий предикату, или undefined. Для индекса используйте findIndex; для поиска справа — findLast/findLastIndex (если доступны)."
		},
		{
			"question": "Когда использовать Array.prototype.some и every?",
			"answer": "some проверяет, есть ли хотя бы один элемент, удовлетворяющий условию (короткое замыкание). every — все ли элементы соответствуют. Оба могут ускорить проверки больших массивов."
		},
		{
			"question": "Для чего используется Array.prototype.includes?",
			"answer": "includes проверяет наличие значения в массиве (NaN поддерживается). В отличие от indexOf не требует сравнивать с −1; полезен для простых проверок принадлежности."
		},
		{
			"question": "Что делает Object.freeze и какие ограничения?",
			"answer": "freeze делает объект неизменяемым: нельзя добавлять/удалять/менять свойства. Это поверхностно: вложенные объекты остаются изменяемыми без дополнительной глубокой заморозки."
		},
		{
			"question": "Чем отличаются Object.seal и Object.preventExtensions?",
			"answer": "seal запрещает добавление/удаление свойств, но позволяет менять существующие (если writable: true). preventExtensions только запрещает добавление новых свойств."
		},
		{
			"question": "Для чего нужны Object.keys/values/entries?",
			"answer": "keys возвращает массив собственных перечислимых ключей, values — значений, entries — пар [ключ, значение]. Удобно для итерации и преобразований через map/reduce."
		},
		{
			"question": "Что делает Object.fromEntries и когда полезно?",
			"answer": "fromEntries строит объект из пар [ключ, значение]. Полезно при инвертировании структур, работе с Map и после трансформаций массива entries()."
		},
		{
			"question": "Что такое Symbol и где применить?",
			"answer": "Symbol — уникальный идентификатор, часто для закрытых/служебных ключей свойств. Не участвует в обычной итерации по ключам; есть глобальный реестр Symbol.for."
		},
		{
			"question": "Что такое итераторы и протокол итерации?",
			"answer": "Итератор — объект с методом next(), возвращающим { value, done }. Объекты итерируемы, если имеют Symbol.iterator; это позволяет использовать for...of и spread."
		},
		{
			"question": "Что такое генераторы и когда их использовать?",
			"answer": "Генераторы (function*) позволяют ленивую выдачу значений через yield и двустороннюю коммуникацию через next()/throw(). Полезны для ленивых коллекций и сложных итераций."
		},
		{
			"question": "Что такое async‑генераторы и for‑await‑of?",
			"answer": "Async function* выдаёт промисы значений, потребляются через for‑await‑of. Удобны для потоковой обработки I/O и последовательных асинхронных источников данных."
		},
		{
			"question": "Что такое WeakMap и зачем она нужна?",
			"answer": "WeakMap хранит пары ключ‑значение, где ключи — только объекты и учитываются сборщиком мусора. Полезно для приватных данных и кэшей без предотвращения GC."
		},
		{
			"question": "Что такое WeakSet и чем отличается от Set?",
			"answer": "WeakSet хранит только объекты и не препятствует их сборке мусора; нет размера и итерации. Подходит для пометок «видел/не видел» без утечек памяти."
		},
		{
			"question": "Чем Map отличается от обычного объекта?",
			"answer": "Map принимает ключи любого типа и сохраняет порядок вставки; размер через size, удобная итерация. Объекты лучше для структур с фиксированными строковыми ключами/JSON."
		},
		{
			"question": "Что такое Set и когда применять?",
			"answer": "Set — коллекция уникальных значений. Удобен для удаления дублей, проверок принадлежности и операций над множествами (объединение/пересечение) без O(n) поиска."
		},
		{
			"question": "Что такое Proxy и типичные ловушки (traps)?",
			"answer": "Proxy перехватывает операции с целевым объектом (get, set, has, ownKeys, apply, construct и др.). Применяется для валидации, реактивности, виртуализации и логирования."
		},
		{
			"question": "Для чего нужен объект Reflect?",
			"answer": "Reflect содержит методы, соответствующие внутренним операциям (Reflect.get, set, apply и т.д.), и возвращает булевы/значения вместо исключений. Удобен внутри прокси‑ловушек."
		},
		{
			"question": "Что такое мемоизация и когда она полезна?",
			"answer": "Мемоизация кэширует результаты детерминированных функций по аргументам, снижая повторные вычисления. Эффективна для тяжёлых/чистых функций; следите за размером кэша и ключами."
		},
		{
			"question": "Что такое хвостовая рекурсия и поддерживается ли TCO?",
			"answer": "Хвостовой вызов — рекурсия в позиции return, позволяющая теоретически оптимизировать стек (TCO). В большинстве движков JS TCO не реализована; используйте циклы/итерации."
		},
		{
			"question": "Что такое каррирование и чем полезно?",
			"answer": "Каррирование превращает f(a,b,c) в f(a)(b)(c), позволяя частично применять аргументы и строить композиции. Улучшает переиспользование и читаемость в функциональном стиле."
		},
		{
			"question": "Что такое частичное применение?",
			"answer": "Частичное применение фиксирует часть аргументов функции и возвращает новую. Отличается от каррирования тем, что не требует по одному аргументу на шаг."
		},
		{
			"question": "Что такое модульный паттерн (Module Pattern)?",
			"answer": "Паттерн использует IIFE/замыкания для инкапсуляции приватных переменных и экспорта публичного API. Исторически применялся до ES‑модулей; полезен для локальных состояний."
		},
		{
			"question": "Что такое паттерн Singleton и когда его избегать?",
			"answer": "Singleton гарантирует единственный экземпляр. В JS часто реализуется через модуль/замыкание. Может усложнять тестирование и увеличивать связность — применяйте осмотрительно."
		},
		{
			"question": "Что такое паттерн Observer в контексте JS?",
			"answer": "Observer — субъект оповещает наблюдателей о событиях (EventEmitter, DOM‑события). Хорош для реактивности и плагинов; следите за отпиской, чтобы избежать утечек."
		},
		{
			"question": "Что такое паттерн Фабрика (Factory)?",
			"answer": "Фабрика создаёт объекты определённого типа, скрывая детали конструирования. Удобна для выбора реализаций по параметрам/окружению, в тестах — для подмен."
		},
		{
			"question": "Что такое движок V8 и из чего он состоит?",
			"answer": "V8 — движок JS (Chrome/Node.js) с парсером, оптимизирующим компилятором и сборщиком мусора. JIT превращает часто исполняемый код в машинный для скорости."
		},
		{
			"question": "Что такое JIT‑компиляция в JS‑движках?",
			"answer": "Just‑In‑Time компиляторы анализируют горячие участки и специализируют код под наблюдаемые типы. Деградация возможна при мегаморфных вызовах и частых сменах типов."
		},
		{
			"question": "Как работает сборка мусора в JS?",
			"answer": "GC освобождает память объектов, на которые нет достижимых ссылок (алгоритмы: маркировка‑сжатие, поколенческие). Избегайте невидимых ссылок (кэши, замыкания) — это утечки."
		},
		{
			"question": "Что такое слабые ссылки и FinalizationRegistry?",
			"answer": "WeakRef/FinalizationRegistry позволяют ссылаться на объекты, не препятствуя GC, и реагировать на их освобождение. Применяйте аккуратно — семантика недетерминирована."
		},
		{
			"question": "Что такое AST и где оно применяется?",
			"answer": "Абстрактное синтаксическое дерево представляют парсеры (Acorn/Esprima). Используется в линтерах, трансформерах (Babel), минификациях и статическом анализе."
		},
		{
			"question": "Что такое ShadowRealm?",
			"answer": "Предлагаемая изолированная среда выполнения JS без доступа к глобальному объекту вызывающей стороны. Подходит для безопасной оценки кода; поддержка зависит от среды/стандарта."
		},
		{
			"question": "Что такое SharedArrayBuffer и ограничения безопасности?",
			"answer": "SharedArrayBuffer даёт общий участок памяти между потоками (workers). Для включения в браузерах требуется изоляция сайта (COOP/COEP) из‑за уязвимостей по времени (Spectre)."
		},
		{
			"question": "Для чего нужен объект Atomics?",
			"answer": "Atomics предоставляет атомарные операции и ожидание/уведомление (wait/notify) на SharedArrayBuffer. Это основа примитивов синхронизации между воркерами."
		},
		{
			"question": "Что такое Web Workers и когда их использовать?",
			"answer": "Workers выполняют JS в фоновом потоке, не блокируя UI. Подходят для тяжёлых вычислений/парсинга; общение через postMessage/структурированное клонирование/SharedArrayBuffer."
		},
		{
			"question": "Что такое Service Workers и возможности PWA?",
			"answer": "Service Worker — прокси‑слой между приложением и сетью для кэша, офлайна и пушей. Работает по HTTPS, имеет жизненный цикл (install/activate) и гибкие стратегии кэширования."
		},
		{
			"question": "Что такое IndexedDB и когда выбирать её?",
			"answer": "IndexedDB — асинхронное ключ‑значение хранилище в браузере с индексами и транзакциями. Выбирайте для больших объёмов/офлайна; для простых кейсов хватит localStorage."
		},
		{
			"question": "Что такое WebAssembly и как оно сочетается с JS?",
			"answer": "WebAssembly — бинарный формат, выполняемый с почти нативной скоростью. Используется для тяжёлых задач (обработка медиа, вычисления) и взаимодействует с JS через импорт/экспорт."
		},
		{
			"question": "Почему делегирование событий улучшает производительность списков?",
			"answer": "Один обработчик на контейнер вместо тысячи на элементах снижает потребление памяти и затраты на подписки/отписки. Особенно эффективно при динамическом DOM (виртуальные списки)."
		},
		{
			"question": "Что такое debounce и когда его применять?",
			"answer": "Debounce откладывает выполнение функции, пока события продолжают приходить (поиск по вводу, ресайз). Снижает лишние вызовы; следите за вызовом по leading/trailing краям."
		},
		{
			"question": "Что такое throttle и чем он отличается от debounce?",
			"answer": "Throttle ограничивает частоту вызовов (не чаще X мс) — полезно для скролла/ресайза. В отличие от debounce, он гарантирует регулярные вызовы в течение активности."
		},
		{
			"question": "Что такое polyfill и чем он отличается от шимов?",
			"answer": "Polyfill добавляет недостающую функциональность стандарта (например, Promise). Шим может менять поведение существующих API. Подбирайте таргеты под окружения (browserslist)."
		},
		{
			"question": "Что такое транспилятор (например, Babel)?",
			"answer": "Транспилятор преобразует код на современном JS/TS в совместимый с целевыми окружениями. Поддерживает плагины/пресеты и часто интегрируется с source maps для отладки."
		},
		{
			"question": "Что такое tree‑shaking и условия для его работы?",
			"answer": "Tree‑shaking удаляет неиспользуемый код на этапе сборки. Требует ESM (статический импорт/экспорт) и информации о сайд‑эффектах; динамические require мешают оптимизации."
		},
		{
			"question": "Что такое поле sideEffects в package.json?",
			"answer": "Поле sideEffects подсказывает сборщику, какие файлы безопасно удалять при tree‑shaking. 'false' означает отсутствие побочных эффектов при импорте модулей (кроме явно указанных)."
		},
		{
			"question": "В чём разница между ESM и CommonJS?",
			"answer": "ESM — статические импорты/экспорты, поддерживает tree‑shaking, топ‑левел await; CommonJS — динамический require, module.exports, синхронная загрузка. Совместимость требует бриджей."
		},
		{
			"question": "Что такое top‑level await и где доступен?",
			"answer": "Top‑level await позволяет использовать await в корне ESM‑модуля. Упрощает инициализацию модулей, но делает импорт модуля асинхронным; недоступен в CommonJS."
		}
	],
	"React": [
		{
			"id": 1,
			"question": "Что такое React и для чего он используется?",
			"answer": "React — это библиотека JavaScript для построения пользовательских интерфейсов. Она позволяет создавать интерфейс как набор независимых компонентов и эффективно обновлять DOM с помощью виртуального DOM."
		},
		{
			"id": 2,
			"question": "Что такое JSX и зачем он нужен?",
			"answer": "JSX — это синтаксическое расширение JavaScript, похожее на HTML, которое компилируется в вызовы React.createElement. Оно делает код компонентов более декларативным и удобным для чтения."
		},
		{
			"id": 3,
			"question": "Что такое компонент в React?",
			"answer": "Компонент — это переиспользуемая часть интерфейса. Компоненты могут быть функциональными или классовыми, принимать props и иметь собственное состояние."
		},
		{
			"id": 4,
			"question": "Что такое props и для чего они нужны?",
			"answer": "Props (properties) — это входные данные, которые передаются от родителя к дочернему компоненту. Они позволяют делать компоненты динамическими и переиспользуемыми."
		},
		{
			"id": 5,
			"question": "Что такое state в React?",
			"answer": "State — это объект с данными внутри компонента, которые могут изменяться со временем. Изменение state вызывает повторный рендеринг компонента."
		},
		{
			"id": 6,
			"question": "В чем разница между props и state?",
			"answer": "Props передаются в компонент извне и не изменяются самим компонентом, а state управляется самим компонентом и может изменяться во время работы приложения."
		},
		{
			"id": 7,
			"question": "Что такое виртуальный DOM?",
			"answer": "Виртуальный DOM — это легковесное представление реального DOM в памяти. React сравнивает новое и старое дерево (diffing) и обновляет только изменившиеся элементы, что повышает производительность."
		},
		{
			"id": 8,
			"question": "Что такое key в React и зачем он нужен?",
			"answer": "Key — это уникальный идентификатор элемента в списке. Он помогает React эффективно определять, какие элементы изменились, добавились или удалились при обновлении списка."
		},
		{
			"id": 9,
			"question": "Что такое событие в React и как оно обрабатывается?",
			"answer": "События в React похожи на события в DOM, но реализованы через синтетическую обертку (SyntheticEvent). Это обеспечивает кросс-браузерную совместимость и оптимизацию работы с событиями."
		},
		{
			"id": 10,
			"question": "Что такое useState и для чего он используется?",
			"answer": "useState — это хук, позволяющий функциональным компонентам хранить и изменять состояние. Он возвращает текущее значение и функцию для его обновления."
		},
		{
			"id": 11,
			"question": "Что такое useEffect?",
			"answer": "useEffect — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание useEffect помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 12,
			"question": "Что такое useContext?",
			"answer": "useContext — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание useContext помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 13,
			"question": "Что такое useReducer?",
			"answer": "useReducer — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание useReducer помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 14,
			"question": "Что такое useMemo?",
			"answer": "useMemo — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание useMemo помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 15,
			"question": "Что такое useCallback?",
			"answer": "useCallback — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание useCallback помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 16,
			"question": "Что такое useRef?",
			"answer": "useRef — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание useRef помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 17,
			"question": "Что такое React.memo?",
			"answer": "React.memo — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание React.memo помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 18,
			"question": "Что такое Жизненный цикл компонентов?",
			"answer": "Жизненный цикл компонентов — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Жизненный цикл компонентов помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 19,
			"question": "Что такое Классовые компоненты?",
			"answer": "Классовые компоненты — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Классовые компоненты помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 20,
			"question": "Что такое Функциональные компоненты?",
			"answer": "Функциональные компоненты — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Функциональные компоненты помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 21,
			"question": "Что такое React Router?",
			"answer": "React Router — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание React Router помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 22,
			"question": "Что такое Навигация?",
			"answer": "Навигация — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Навигация помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 23,
			"question": "Что такое Redux?",
			"answer": "Redux — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Redux помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 24,
			"question": "Что такое Context API?",
			"answer": "Context API — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Context API помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 25,
			"question": "Что такое Асинхронные запросы?",
			"answer": "Асинхронные запросы — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Асинхронные запросы помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 26,
			"question": "Что такое React Query?",
			"answer": "React Query — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание React Query помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 27,
			"question": "Что такое Оптимизация?",
			"answer": "Оптимизация — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Оптимизация помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 28,
			"question": "Что такое Разделение кода?",
			"answer": "Разделение кода — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Разделение кода помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 29,
			"question": "Что такое Suspense?",
			"answer": "Suspense — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Suspense помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 30,
			"question": "Что такое Error Boundary?",
			"answer": "Error Boundary — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Error Boundary помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 31,
			"question": "Что такое Next.js SSR?",
			"answer": "Next.js SSR — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Next.js SSR помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 32,
			"question": "Что такое Next.js SSG?",
			"answer": "Next.js SSG — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Next.js SSG помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 33,
			"question": "Что такое Hydration?",
			"answer": "Hydration — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Hydration помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 34,
			"question": "Что такое Concurrent Mode?",
			"answer": "Concurrent Mode — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Concurrent Mode помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 35,
			"question": "Что такое Reconciliation?",
			"answer": "Reconciliation — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Reconciliation помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 36,
			"question": "Что такое Fiber?",
			"answer": "Fiber — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Fiber помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 37,
			"question": "Что такое Формы в React?",
			"answer": "Формы в React — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Формы в React помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 38,
			"question": "Что такое React Hook Form?",
			"answer": "React Hook Form — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание React Hook Form помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 39,
			"question": "Что такое Formik?",
			"answer": "Formik — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Formik помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 40,
			"question": "Что такое Контролируемые компоненты?",
			"answer": "Контролируемые компоненты — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Контролируемые компоненты помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 41,
			"question": "Что такое Неконтролируемые компоненты?",
			"answer": "Неконтролируемые компоненты — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Неконтролируемые компоненты помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 42,
			"question": "Что такое Списки?",
			"answer": "Списки — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Списки помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 43,
			"question": "Что такое Фрагменты?",
			"answer": "Фрагменты — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Фрагменты помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 44,
			"question": "Что такое Порталы?",
			"answer": "Порталы — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Порталы помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 45,
			"question": "Что такое Стилизация?",
			"answer": "Стилизация — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Стилизация помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 46,
			"question": "Что такое Styled-components?",
			"answer": "Styled-components — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Styled-components помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 47,
			"question": "Что такое Emotion?",
			"answer": "Emotion — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Emotion помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 48,
			"question": "Что такое CSS Modules?",
			"answer": "CSS Modules — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание CSS Modules помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 49,
			"question": "Что такое Tailwind?",
			"answer": "Tailwind — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Tailwind помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 50,
			"question": "Что такое UI-библиотеки?",
			"answer": "UI-библиотеки — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание UI-библиотеки помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 51,
			"question": "Что такое Тестирование RTL?",
			"answer": "Тестирование RTL — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Тестирование RTL помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 52,
			"question": "Что такое Тестирование Jest?",
			"answer": "Тестирование Jest — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Тестирование Jest помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 53,
			"question": "Что такое Снепшот-тесты?",
			"answer": "Снепшот-тесты — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Снепшот-тесты помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 54,
			"question": "Что такое Паттерн HOC?",
			"answer": "Паттерн HOC — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Паттерн HOC помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 55,
			"question": "Что такое Паттерн Render Props?",
			"answer": "Паттерн Render Props — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Паттерн Render Props помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 56,
			"question": "Что такое Паттерн Compound Components?",
			"answer": "Паттерн Compound Components — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Паттерн Compound Components помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 57,
			"question": "Что такое Контейнер и презентационный компонент?",
			"answer": "Контейнер и презентационный компонент — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Контейнер и презентационный компонент помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 58,
			"question": "Что такое SOLID в React?",
			"answer": "SOLID в React — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание SOLID в React помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 59,
			"question": "Что такое Чистые компоненты?",
			"answer": "Чистые компоненты — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Чистые компоненты помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 60,
			"question": "Что такое Ленивая загрузка компонентов?",
			"answer": "Ленивая загрузка компонентов — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Ленивая загрузка компонентов помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 61,
			"question": "Что такое React.lazy?",
			"answer": "React.lazy — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание React.lazy помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 62,
			"question": "Что такое Suspense fallback?",
			"answer": "Suspense fallback — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Suspense fallback помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 63,
			"question": "Что такое Profiler?",
			"answer": "Profiler — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Profiler помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 64,
			"question": "Что такое StrictMode?",
			"answer": "StrictMode — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание StrictMode помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 65,
			"question": "Что такое useLayoutEffect?",
			"answer": "useLayoutEffect — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание useLayoutEffect помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 66,
			"question": "Что такое useImperativeHandle?",
			"answer": "useImperativeHandle — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание useImperativeHandle помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 67,
			"question": "Что такое forwardRef?",
			"answer": "forwardRef — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание forwardRef помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 68,
			"question": "Что такое Оптимизация ререндеров?",
			"answer": "Оптимизация ререндеров — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Оптимизация ререндеров помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 69,
			"question": "Что такое Batching?",
			"answer": "Batching — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Batching помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 70,
			"question": "Что такое Server Components?",
			"answer": "Server Components — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Server Components помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 71,
			"question": "Что такое Static Site Generation?",
			"answer": "Static Site Generation — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Static Site Generation помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 72,
			"question": "Что такое Incremental Static Regeneration?",
			"answer": "Incremental Static Regeneration — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Incremental Static Regeneration помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 73,
			"question": "Что такое getServerSideProps?",
			"answer": "getServerSideProps — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание getServerSideProps помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 74,
			"question": "Что такое getStaticProps?",
			"answer": "getStaticProps — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание getStaticProps помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 75,
			"question": "Что такое getInitialProps?",
			"answer": "getInitialProps — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание getInitialProps помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 76,
			"question": "Что такое API Routes?",
			"answer": "API Routes — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание API Routes помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 77,
			"question": "Что такое Middleware Next.js?",
			"answer": "Middleware Next.js — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Middleware Next.js помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 78,
			"question": "Что такое Hooks правила?",
			"answer": "Hooks правила — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Hooks правила помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 79,
			"question": "Что такое Кастомные хуки?",
			"answer": "Кастомные хуки — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Кастомные хуки помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 80,
			"question": "Что такое Хуки композиция?",
			"answer": "Хуки композиция — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Хуки композиция помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 81,
			"question": "Что такое Хуки против HOC?",
			"answer": "Хуки против HOC — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Хуки против HOC помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 82,
			"question": "Что такое Redux Toolkit?",
			"answer": "Redux Toolkit — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Redux Toolkit помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 83,
			"question": "Что такое Zustand?",
			"answer": "Zustand — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Zustand помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 84,
			"question": "Что такое Jotai?",
			"answer": "Jotai — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Jotai помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 85,
			"question": "Что такое Recoil?",
			"answer": "Recoil — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Recoil помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 86,
			"question": "Что такое MobX?",
			"answer": "MobX — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание MobX помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 87,
			"question": "Что такое GraphQL и React?",
			"answer": "GraphQL и React — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание GraphQL и React помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 88,
			"question": "Что такое Apollo Client?",
			"answer": "Apollo Client — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Apollo Client помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 89,
			"question": "Что такое Relay?",
			"answer": "Relay — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Relay помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 90,
			"question": "Что такое SWR?",
			"answer": "SWR — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание SWR помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 91,
			"question": "Что такое TanStack Query?",
			"answer": "TanStack Query — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание TanStack Query помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 92,
			"question": "Что такое WebSockets и React?",
			"answer": "WebSockets и React — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание WebSockets и React помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 93,
			"question": "Что такое SSE и React?",
			"answer": "SSE и React — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание SSE и React помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 94,
			"question": "Что такое Context производительность?",
			"answer": "Context производительность — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Context производительность помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 95,
			"question": "Что такое Селекторы Redux?",
			"answer": "Селекторы Redux — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Селекторы Redux помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 96,
			"question": "Что такое Reselect?",
			"answer": "Reselect — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Reselect помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 97,
			"question": "Что такое React DevTools?",
			"answer": "React DevTools — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание React DevTools помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 98,
			"question": "Что такое useTransition?",
			"answer": "useTransition — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание useTransition помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 99,
			"question": "Что такое useDeferredValue?",
			"answer": "useDeferredValue — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание useDeferredValue помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 100,
			"question": "Что такое React 18 особенности?",
			"answer": "React 18 особенности — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание React 18 особенности помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 101,
			"question": "Что такое Streaming SSR?",
			"answer": "Streaming SSR — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Streaming SSR помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 102,
			"question": "Что такое React Server Actions?",
			"answer": "React Server Actions — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание React Server Actions помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 103,
			"question": "Что такое Server Components ограничения?",
			"answer": "Server Components ограничения — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Server Components ограничения помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 104,
			"question": "Что такое React 19 нововведения?",
			"answer": "React 19 нововведения — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание React 19 нововведения помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 105,
			"question": "Что такое Оптимизация изображений?",
			"answer": "Оптимизация изображений — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Оптимизация изображений помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 106,
			"question": "Что такое Рендеринг таблиц?",
			"answer": "Рендеринг таблиц — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Рендеринг таблиц помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 107,
			"question": "Что такое Accessibility в React?",
			"answer": "Accessibility в React — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Accessibility в React помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 108,
			"question": "Что такое ARIA атрибуты?",
			"answer": "ARIA атрибуты — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание ARIA атрибуты помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 109,
			"question": "Что такое Internationalization (i18n)?",
			"answer": "Internationalization (i18n) — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание Internationalization (i18n) помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 110,
			"question": "Что такое React с TypeScript?",
			"answer": "React с TypeScript — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание React с TypeScript помогает создавать более масштабируемые и эффективные приложения."
		},
		{
			"id": 111,
			"question": "Что такое PropTypes vs TS?",
			"answer": "PropTypes vs TS — это важная концепция или инструмент в React. Он используется для решения специфической задачи (например, управление состоянием, оптимизация или рендеринг). Знание PropTypes vs TS помогает создавать более масштабируемые и эффективные приложения."
		}
	],
	"ООП и Архитектура": [
		{
			"id": 1,
			"question": "Что такое объектно-ориентированное программирование (ООП)?",
			"answer": "ООП — это парадигма программирования, основанная на моделировании сущностей как объектов с состоянием и поведением. Она позволяет создавать гибкие и переиспользуемые структуры данных."
		},
		{
			"id": 2,
			"question": "Что такое класс и объект в ООП?",
			"answer": "Класс — это шаблон для создания объектов, описывающий их свойства и методы. Объект — конкретный экземпляр класса с уникальными значениями свойств."
		},
		{
			"id": 3,
			"question": "Что такое инкапсуляция?",
			"answer": "Инкапсуляция — это механизм скрытия внутреннего состояния объекта и предоставления доступа только через методы. Это защищает данные и обеспечивает контроль их изменения."
		},
		{
			"id": 4,
			"question": "Что такое наследование?",
			"answer": "Наследование позволяет создавать новый класс на основе существующего, перенимая его свойства и методы. Это помогает повторно использовать код и расширять функциональность."
		},
		{
			"id": 5,
			"question": "Что такое полиморфизм?",
			"answer": "Полиморфизм — это способность объектов разных классов обрабатывать одинаковые сообщения по-своему. Позволяет писать гибкий код, который работает с интерфейсами, а не с конкретными классами."
		},
		{
			"id": 6,
			"question": "Что такое абстракция?",
			"answer": "Абстракция позволяет выделять общие характеристики объектов и скрывать детали реализации. Это помогает сосредоточиться на важных аспектах и упрощает поддержку кода."
		},
		{
			"id": 7,
			"question": "Что такое SOLID-принципы?",
			"answer": "SOLID — набор пяти принципов объектно-ориентированного проектирования: Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion. Они помогают писать гибкий, поддерживаемый и масштабируемый код."
		},
		{
			"id": 8,
			"question": "Что такое принцип единственной ответственности (SRP)?",
			"answer": "Каждый класс или модуль должен иметь только одну причину для изменения. Это упрощает поддержку, тестирование и переиспользование компонентов."
		},
		{
			"id": 9,
			"question": "Что такое принцип открытости/закрытости (OCP)?",
			"answer": "Классы должны быть открыты для расширения, но закрыты для изменения. То есть новую функциональность лучше добавлять через наследование или композицию, а не менять существующий код."
		},
		{
			"id": 10,
			"question": "Что такое принцип подстановки Лисков (LSP)?",
			"answer": "Объекты подклассов должны корректно заменять объекты базового класса без изменения поведения программы. Это обеспечивает корректность и предсказуемость полиморфного кода."
		},
		{
			"id": 11,
			"question": "Что такое Factory Pattern?",
			"answer": "Factory Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Factory Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 12,
			"question": "Что такое Singleton Pattern?",
			"answer": "Singleton Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Singleton Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 13,
			"question": "Что такое Observer Pattern?",
			"answer": "Observer Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Observer Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 14,
			"question": "Что такое Strategy Pattern?",
			"answer": "Strategy Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Strategy Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 15,
			"question": "Что такое Adapter Pattern?",
			"answer": "Adapter Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Adapter Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 16,
			"question": "Что такое Decorator Pattern?",
			"answer": "Decorator Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Decorator Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 17,
			"question": "Что такое Composite Pattern?",
			"answer": "Composite Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Composite Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 18,
			"question": "Что такое Proxy Pattern?",
			"answer": "Proxy Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Proxy Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 19,
			"question": "Что такое Command Pattern?",
			"answer": "Command Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Command Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 20,
			"question": "Что такое Iterator Pattern?",
			"answer": "Iterator Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Iterator Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 21,
			"question": "Что такое MVC Pattern?",
			"answer": "MVC Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание MVC Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 22,
			"question": "Что такое MVVM Pattern?",
			"answer": "MVVM Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание MVVM Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 23,
			"question": "Что такое Clean Architecture?",
			"answer": "Clean Architecture — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Clean Architecture помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 24,
			"question": "Что такое Hexagonal Architecture?",
			"answer": "Hexagonal Architecture — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Hexagonal Architecture помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 25,
			"question": "Что такое Layered Architecture?",
			"answer": "Layered Architecture — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Layered Architecture помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 26,
			"question": "Что такое Microservices?",
			"answer": "Microservices — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Microservices помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 27,
			"question": "Что такое Monolith?",
			"answer": "Monolith — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Monolith помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 28,
			"question": "Что такое CQRS?",
			"answer": "CQRS — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание CQRS помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 29,
			"question": "Что такое Event Sourcing?",
			"answer": "Event Sourcing — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Event Sourcing помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 30,
			"question": "Что такое CAP Theorem?",
			"answer": "CAP Theorem — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание CAP Theorem помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 31,
			"question": "Что такое Transaction Management?",
			"answer": "Transaction Management — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Transaction Management помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 32,
			"question": "Что такое ACID?",
			"answer": "ACID — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание ACID помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 33,
			"question": "Что такое BASE?",
			"answer": "BASE — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание BASE помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 34,
			"question": "Что такое Dependency Injection?",
			"answer": "Dependency Injection — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Dependency Injection помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 35,
			"question": "Что такое Service Locator?",
			"answer": "Service Locator — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Service Locator помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 36,
			"question": "Что такое Repository Pattern?",
			"answer": "Repository Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Repository Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 37,
			"question": "Что такое Unit of Work?",
			"answer": "Unit of Work — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Unit of Work помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 38,
			"question": "Что такое Domain-Driven Design?",
			"answer": "Domain-Driven Design — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Domain-Driven Design помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 39,
			"question": "Что такое Bounded Context?",
			"answer": "Bounded Context — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Bounded Context помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 40,
			"question": "Что такое Aggregate?",
			"answer": "Aggregate — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Aggregate помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 41,
			"question": "Что такое Event-Driven Architecture?",
			"answer": "Event-Driven Architecture — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Event-Driven Architecture помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 42,
			"question": "Что такое Message Queue?",
			"answer": "Message Queue — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Message Queue помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 43,
			"question": "Что такое Saga Pattern?",
			"answer": "Saga Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Saga Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 44,
			"question": "Что такое Circuit Breaker?",
			"answer": "Circuit Breaker — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Circuit Breaker помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 45,
			"question": "Что такое Load Balancing?",
			"answer": "Load Balancing — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Load Balancing помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 46,
			"question": "Что такое Caching Strategies?",
			"answer": "Caching Strategies — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Caching Strategies помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 47,
			"question": "Что такое CQRS Read/Write Separation?",
			"answer": "CQRS Read/Write Separation — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание CQRS Read/Write Separation помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 48,
			"question": "Что такое API Gateway?",
			"answer": "API Gateway — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание API Gateway помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 49,
			"question": "Что такое Database Sharding?",
			"answer": "Database Sharding — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Database Sharding помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 50,
			"question": "Что такое Database Replication?",
			"answer": "Database Replication — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Database Replication помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 51,
			"question": "Что такое Scalability?",
			"answer": "Scalability — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Scalability помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 52,
			"question": "Что такое Horizontal vs Vertical Scaling?",
			"answer": "Horizontal vs Vertical Scaling — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Horizontal vs Vertical Scaling помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 53,
			"question": "Что такое High Availability?",
			"answer": "High Availability — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание High Availability помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 54,
			"question": "Что такое Fault Tolerance?",
			"answer": "Fault Tolerance — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Fault Tolerance помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 55,
			"question": "Что такое Logging and Monitoring?",
			"answer": "Logging and Monitoring — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Logging and Monitoring помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 56,
			"question": "Что такое Versioning API?",
			"answer": "Versioning API — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Versioning API помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 57,
			"question": "Что такое Backward Compatibility?",
			"answer": "Backward Compatibility — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Backward Compatibility помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 58,
			"question": "Что такое Code Smells?",
			"answer": "Code Smells — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Code Smells помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 59,
			"question": "Что такое Refactoring Techniques?",
			"answer": "Refactoring Techniques — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Refactoring Techniques помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 60,
			"question": "Что такое Test-Driven Development?",
			"answer": "Test-Driven Development — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Test-Driven Development помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 61,
			"question": "Что такое Behavior-Driven Development?",
			"answer": "Behavior-Driven Development — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Behavior-Driven Development помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 62,
			"question": "Что такое Continuous Integration?",
			"answer": "Continuous Integration — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Continuous Integration помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 63,
			"question": "Что такое Continuous Deployment?",
			"answer": "Continuous Deployment — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Continuous Deployment помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 64,
			"question": "Что такое Docker in Architecture?",
			"answer": "Docker in Architecture — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Docker in Architecture помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 65,
			"question": "Что такое Kubernetes?",
			"answer": "Kubernetes — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Kubernetes помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 66,
			"question": "Что такое Cloud Native Applications?",
			"answer": "Cloud Native Applications — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Cloud Native Applications помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 67,
			"question": "Что такое Event Storming?",
			"answer": "Event Storming — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Event Storming помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 68,
			"question": "Что такое Domain Events?",
			"answer": "Domain Events — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Domain Events помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 69,
			"question": "Что такое Anti-Corruption Layer?",
			"answer": "Anti-Corruption Layer — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Anti-Corruption Layer помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 70,
			"question": "Что такое Hexagonal Ports and Adapters?",
			"answer": "Hexagonal Ports and Adapters — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Hexagonal Ports and Adapters помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 71,
			"question": "Что такое Command Query Separation?",
			"answer": "Command Query Separation — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Command Query Separation помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 72,
			"question": "Что такое Read Model vs Write Model?",
			"answer": "Read Model vs Write Model — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Read Model vs Write Model помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 73,
			"question": "Что такое Saga Orchestration vs Choreography?",
			"answer": "Saga Orchestration vs Choreography — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Saga Orchestration vs Choreography помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 74,
			"question": "Что такое Asynchronous Messaging?",
			"answer": "Asynchronous Messaging — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Asynchronous Messaging помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 75,
			"question": "Что такое Idempotency?",
			"answer": "Idempotency — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Idempotency помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 76,
			"question": "Что такое Retry Strategies?",
			"answer": "Retry Strategies — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Retry Strategies помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 77,
			"question": "Что такое Circuit Breaker Pattern?",
			"answer": "Circuit Breaker Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Circuit Breaker Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 78,
			"question": "Что такое Bulkhead Pattern?",
			"answer": "Bulkhead Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Bulkhead Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 79,
			"question": "Что такое Observer vs Pub/Sub?",
			"answer": "Observer vs Pub/Sub — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Observer vs Pub/Sub помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 80,
			"question": "Что такое Dependency Graph?",
			"answer": "Dependency Graph — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Dependency Graph помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 81,
			"question": "Что такое Service Mesh?",
			"answer": "Service Mesh — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Service Mesh помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 82,
			"question": "Что такое Sidecar Pattern?",
			"answer": "Sidecar Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Sidecar Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 83,
			"question": "Что такое API Composition?",
			"answer": "API Composition — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание API Composition помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 84,
			"question": "Что такое Backend For Frontend (BFF)?",
			"answer": "Backend For Frontend (BFF) — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Backend For Frontend (BFF) помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 85,
			"question": "Что такое GraphQL vs REST?",
			"answer": "GraphQL vs REST — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание GraphQL vs REST помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 86,
			"question": "Что такое Database Transactions in Microservices?",
			"answer": "Database Transactions in Microservices — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Database Transactions in Microservices помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 87,
			"question": "Что такое Distributed Tracing?",
			"answer": "Distributed Tracing — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Distributed Tracing помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 88,
			"question": "Что такое CQRS Event Replay?",
			"answer": "CQRS Event Replay — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание CQRS Event Replay помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 89,
			"question": "Что такое Eventual Consistency?",
			"answer": "Eventual Consistency — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Eventual Consistency помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 90,
			"question": "Что такое Saga Compensations?",
			"answer": "Saga Compensations — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Saga Compensations помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 91,
			"question": "Что такое Anti-patterns?",
			"answer": "Anti-patterns — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Anti-patterns помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 92,
			"question": "Что такое God Object?",
			"answer": "God Object — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание God Object помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 93,
			"question": "Что такое Spaghetti Code?",
			"answer": "Spaghetti Code — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Spaghetti Code помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 94,
			"question": "Что такое Anemic Domain Model?",
			"answer": "Anemic Domain Model — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Anemic Domain Model помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 95,
			"question": "Что такое Tight Coupling?",
			"answer": "Tight Coupling — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Tight Coupling помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 96,
			"question": "Что такое Loose Coupling?",
			"answer": "Loose Coupling — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Loose Coupling помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 97,
			"question": "Что такое Separation of Concerns?",
			"answer": "Separation of Concerns — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Separation of Concerns помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 98,
			"question": "Что такое Encapsulation in Architecture?",
			"answer": "Encapsulation in Architecture — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Encapsulation in Architecture помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 99,
			"question": "Что такое Interface Segregation in Services?",
			"answer": "Interface Segregation in Services — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Interface Segregation in Services помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 100,
			"question": "Что такое Design by Contract?",
			"answer": "Design by Contract — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Design by Contract помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 101,
			"question": "Что такое Adapter vs Facade?",
			"answer": "Adapter vs Facade — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Adapter vs Facade помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 102,
			"question": "Что такое Decorator vs Proxy?",
			"answer": "Decorator vs Proxy — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Decorator vs Proxy помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 103,
			"question": "Что такое Observer vs Listener?",
			"answer": "Observer vs Listener — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Observer vs Listener помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 104,
			"question": "Что такое Strategy vs State?",
			"answer": "Strategy vs State — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Strategy vs State помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 105,
			"question": "Что такое Builder Pattern?",
			"answer": "Builder Pattern — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Builder Pattern помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 106,
			"question": "Что такое Factory vs Abstract Factory?",
			"answer": "Factory vs Abstract Factory — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Factory vs Abstract Factory помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 107,
			"question": "Что такое Command vs Strategy?",
			"answer": "Command vs Strategy — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Command vs Strategy помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 108,
			"question": "Что такое Dependency Injection Types?",
			"answer": "Dependency Injection Types — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Dependency Injection Types помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 109,
			"question": "Что такое Service Registration?",
			"answer": "Service Registration — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Service Registration помогает создавать гибкие, надежные и поддерживаемые приложения."
		},
		{
			"id": 110,
			"question": "Что такое Dynamic Module Loading?",
			"answer": "Dynamic Module Loading — это ключевая концепция или паттерн в ООП/архитектуре. Он используется для решения специфической задачи (например, управления зависимостями, организации кода или масштабирования системы). Понимание Dynamic Module Loading помогает создавать гибкие, надежные и поддерживаемые приложения."
		}
	]
}

  